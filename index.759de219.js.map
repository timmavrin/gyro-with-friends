{"mappings":"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","sources":["<anon>","src/index.ts","src/gyro.ts","src/gyroCanvas.ts"],"sourcesContent":["class $de721603b3081a12$export$2f471b5aa48f9e76 {\n    constructor(){\n        this._isCalibrating = false;\n        this._hasPermission = false;\n        /** Is the gyroscope in calibration mode? */ this.isCalibrating = ()=>this._isCalibrating;\n        /** Y-Axis, Percentage of current beta angle from calibrated 0 - Max angle. */ this.betaPercent = 0;\n        /** X-Axis, Percentage of current gamma angle from calibrated 0 - Max angle. */ this.gammaPercent = 0;\n        // Internal Stuff\n        this.beta = 0;\n        this.betaOffset = 0;\n        this.betaMax = 45;\n        this.gamma = 0;\n        this.gammaOffset = 0;\n        this.gammaMax = 45;\n        this.calibrateCenter();\n        window.addEventListener(\"deviceorientation\", ()=>this._hasPermission = true, {\n            once: true\n        });\n    }\n    [Symbol.dispose]() {\n        window.removeEventListener(\"deviceorientation\", this.listenToOrientation.bind(this), true);\n    }\n    listen() {\n        window.removeEventListener(\"deviceorientation\", this.listenToOrientation.bind(this), true);\n        window.addEventListener(\"deviceorientation\", this.listenToOrientation.bind(this), true);\n    }\n    listenToOrientation(e) {\n        if (e.beta && e.gamma) {\n            this.beta = e.beta - this.betaOffset;\n            if (this.beta > 180) this.beta = -180 - this.beta;\n            else if (this.beta < -180) this.beta = -(180 - this.beta);\n            this.gamma = e.gamma - this.gammaOffset;\n            if (this.gamma > 90) this.gamma = -90 - this.gamma;\n            else if (this.gamma < -90) this.gamma = -(90 - this.gamma);\n            this.betaPercent = 0;\n            if (this.beta < 0) this.betaPercent = Math.max(-this.betaMax, this.beta) / this.betaMax;\n            else if (this.beta > 0) this.betaPercent = Math.min(this.betaMax, this.beta) / this.betaMax;\n            this.gammaPercent = 0;\n            if (this.gamma < 0) this.gammaPercent = Math.max(-this.gammaMax, this.gamma) / this.gammaMax;\n            else if (this.gamma > 0) this.gammaPercent = Math.min(this.gammaMax, this.gamma) / this.gammaMax;\n        }\n    }\n    /**Calibrates the starting angles that correspond to the reticle being at the center of the screen.*/ calibrateCenter() {\n        window.addEventListener(\"deviceorientation\", (e)=>{\n            this.betaOffset = e.beta ?? 0;\n            this.gammaOffset = e.gamma ?? 0;\n        }, {\n            once: true\n        });\n    }\n    startCalibration() {\n        this._isCalibrating = true;\n        this.calibrateCenter();\n        this.betaMax = 5;\n        this.gammaMax = 5;\n    }\n    endCalibration() {\n        this._isCalibrating = false;\n    }\n    /**In calibration mode, this function is called multiple times.\r\n   * As the user tilts the device at comfortable angles, an absolute value of the angles are recorded.\r\n   * Calibrating for small tilts makes it more sensitive.\r\n   * Calibrating big tilts make it more precise\r\n   */ calibrateMax() {\n        this.betaMax = Math.max(this.betaMax, Math.abs(this.beta));\n        this.gammaMax = Math.max(this.gammaMax, Math.abs(this.gamma));\n    }\n}\n\n\nclass $1a69b22be1d9263e$export$2367fe50a6a20d49 {\n    constructor(){\n        this.squarePixels = 1000;\n        this.isDrawing = false;\n        this.color = \"rgb(0,0,0)\";\n        const drawLayer = document.createElement(\"canvas\");\n        const pointerLayer = document.createElement(\"canvas\");\n        this.drawCtx = drawLayer.getContext(\"2d\");\n        this.pointerCtx = pointerLayer.getContext(\"2d\");\n        // Assign canvas pixel size\n        drawLayer.height = drawLayer.width = pointerLayer.height = pointerLayer.width = this.squarePixels;\n        drawLayer.className = pointerLayer.className = \"canvas\";\n        drawLayer.id = \"canvas\";\n        pointerLayer.id = \"pointerCanvas\";\n    }\n    registerParent(parent) {\n        if (parent) {\n            const parentElement = parent;\n            const cssSize = Math.min(window.innerHeight, window.innerWidth);\n            parentElement.style.setProperty(\"--canvas-size\", cssSize + \"px\");\n            parent.appendChild(this.drawCtx.canvas);\n            parent.appendChild(this.pointerCtx.canvas);\n        }\n    }\n}\n\n\nconst $1e6a16da88d577c6$var$_gyroRef = new (0, $de721603b3081a12$export$2f471b5aa48f9e76)();\nconst $1e6a16da88d577c6$var$_canvas = new (0, $1a69b22be1d9263e$export$2367fe50a6a20d49)();\nwindow.onload = ()=>{\n    $1e6a16da88d577c6$var$_canvas.registerParent(document.querySelector(\"#canvas-container\"));\n    let _drawButton = document.querySelector(\"#draw-button\");\n    let _requestButton = document.querySelector(\"#permission\");\n    _drawButton?.addEventListener(\"touchstart\", (e)=>{\n        $1e6a16da88d577c6$var$_canvas.isDrawing = true;\n        // Set color the first time\n        $1e6a16da88d577c6$var$_canvas.color = $1e6a16da88d577c6$var$getHSL(e.touches[0].clientX);\n    });\n    _drawButton?.addEventListener(\"touchmove\", (e)=>{\n        // Keep setting the color\n        $1e6a16da88d577c6$var$_canvas.color = $1e6a16da88d577c6$var$getHSL(e.touches[0].clientX);\n    });\n    _drawButton?.addEventListener(\"touchend\", ()=>{\n        $1e6a16da88d577c6$var$_canvas.isDrawing = false;\n    });\n    setTimeout(()=>{\n        if (!$1e6a16da88d577c6$var$_gyroRef._hasPermission) {\n            _drawButton.style.display = \"none\";\n            _requestButton.style.display = \"block\";\n            _requestButton.addEventListener(\"touchend\", ()=>{\n                if (\"requestPermission\" in DeviceOrientationEvent && typeof DeviceOrientationEvent[\"requestPermission\"] === \"function\") DeviceOrientationEvent.requestPermission().then((status)=>{\n                    if (status === \"granted\") {\n                        $1e6a16da88d577c6$var$_gyroRef.listen();\n                        _drawButton.style.display = \"block\";\n                        _requestButton.style.display = \"none\";\n                    }\n                });\n            });\n        } else $1e6a16da88d577c6$var$_gyroRef.listen();\n    }, 100);\n    document.querySelector(\"#calibrate-button\")?.addEventListener(\"touchstart\", (e)=>{\n        $1e6a16da88d577c6$var$_gyroRef.startCalibration();\n    });\n    document.querySelector(\"#calibrate-button\")?.addEventListener(\"touchend\", (e)=>{\n        $1e6a16da88d577c6$var$_gyroRef.endCalibration();\n    });\n    window.requestAnimationFrame($1e6a16da88d577c6$var$draw);\n};\nconst $1e6a16da88d577c6$var$getHSL = (clientX)=>{\n    return `hsl(${360 * clientX / window.innerWidth} 100 50)`;\n};\nconst $1e6a16da88d577c6$var$draw = ()=>{\n    if ($1e6a16da88d577c6$var$_gyroRef.isCalibrating()) $1e6a16da88d577c6$var$_gyroRef.calibrateMax();\n    else {\n        let centerX = $1e6a16da88d577c6$var$_canvas.squarePixels / 2;\n        let centerY = $1e6a16da88d577c6$var$_canvas.squarePixels / 2;\n        let xPos = centerX + $1e6a16da88d577c6$var$_canvas.squarePixels * $1e6a16da88d577c6$var$_gyroRef.gammaPercent / 2;\n        let yPos = centerY + $1e6a16da88d577c6$var$_canvas.squarePixels * $1e6a16da88d577c6$var$_gyroRef.betaPercent / 2;\n        if ($1e6a16da88d577c6$var$_canvas.isDrawing) {\n            $1e6a16da88d577c6$var$_canvas.drawCtx.beginPath();\n            $1e6a16da88d577c6$var$_canvas.drawCtx.arc(xPos, yPos, 5, 0, 2 * Math.PI, true);\n            $1e6a16da88d577c6$var$_canvas.drawCtx.fillStyle = $1e6a16da88d577c6$var$_canvas.color;\n            $1e6a16da88d577c6$var$_canvas.drawCtx.fill();\n        }\n        $1e6a16da88d577c6$var$_canvas.pointerCtx.clearRect(0, 0, $1e6a16da88d577c6$var$_canvas.squarePixels, $1e6a16da88d577c6$var$_canvas.squarePixels);\n        $1e6a16da88d577c6$var$_canvas.pointerCtx.beginPath();\n        $1e6a16da88d577c6$var$_canvas.pointerCtx.arc(xPos, yPos, 20, 0, 2 * Math.PI, true);\n        $1e6a16da88d577c6$var$_canvas.pointerCtx.strokeStyle = \"#333\";\n        $1e6a16da88d577c6$var$_canvas.pointerCtx.stroke();\n        $1e6a16da88d577c6$var$_canvas.pointerCtx.beginPath();\n        $1e6a16da88d577c6$var$_canvas.pointerCtx.arc(xPos, yPos, 5, 0, 2 * Math.PI, true);\n        $1e6a16da88d577c6$var$_canvas.pointerCtx.fillStyle = \"#000\";\n        $1e6a16da88d577c6$var$_canvas.pointerCtx.fill();\n    }\n    window.requestAnimationFrame($1e6a16da88d577c6$var$draw);\n};\n\n\n//# sourceMappingURL=index.759de219.js.map\n","import { Gyro } from './gyro';\r\nimport { GyroCanvas } from './gyroCanvas';\r\n\r\nconst _gyroRef = new Gyro();\r\nconst _canvas = new GyroCanvas();\r\n\r\nwindow.onload = () => {\r\n  _canvas.registerParent(document.querySelector('#canvas-container'));\r\n  let _drawButton = document.querySelector('#draw-button') as HTMLDivElement;\r\n  let _requestButton = document.querySelector('#permission') as HTMLDivElement;\r\n  _drawButton?.addEventListener('touchstart', (e) => {\r\n    _canvas.isDrawing = true;\r\n    // Set color the first time\r\n    _canvas.color = getHSL((e as TouchEvent).touches[0].clientX);\r\n  });\r\n  _drawButton?.addEventListener('touchmove', (e) => {\r\n    // Keep setting the color\r\n    _canvas.color = getHSL((e as TouchEvent).touches[0].clientX);\r\n  });\r\n  _drawButton?.addEventListener('touchend', () => {\r\n    _canvas.isDrawing = false;\r\n  });\r\n\r\n  setTimeout(() => {\r\n    if (!_gyroRef._hasPermission) {\r\n      _drawButton.style.display = 'none';\r\n      _requestButton.style.display = 'block';\r\n      _requestButton.addEventListener('touchend', () => {\r\n        if (\r\n          'requestPermission' in DeviceOrientationEvent &&\r\n          typeof DeviceOrientationEvent['requestPermission'] === 'function'\r\n        ) {\r\n          DeviceOrientationEvent.requestPermission().then((status: string) => {\r\n            if (status === 'granted') {\r\n              _gyroRef.listen();\r\n              _drawButton.style.display = 'block';\r\n              _requestButton.style.display = 'none';\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      _gyroRef.listen();\r\n    }\r\n  }, 100);\r\n  document.querySelector('#calibrate-button')?.addEventListener('touchstart', (e) => {\r\n    _gyroRef.startCalibration();\r\n  });\r\n  document.querySelector('#calibrate-button')?.addEventListener('touchend', (e) => {\r\n    _gyroRef.endCalibration();\r\n  });\r\n  window.requestAnimationFrame(draw);\r\n};\r\n\r\nconst getHSL = (clientX: number) => {\r\n  return `hsl(${(360 * clientX) / window.innerWidth} 100 50)`;\r\n};\r\n\r\nconst draw = () => {\r\n  if (_gyroRef.isCalibrating()) {\r\n    _gyroRef.calibrateMax();\r\n  } else {\r\n    let centerX = _canvas.squarePixels / 2;\r\n    let centerY = _canvas.squarePixels / 2;\r\n\r\n    let xPos = centerX + (_canvas.squarePixels * _gyroRef.gammaPercent) / 2;\r\n    let yPos = centerY + (_canvas.squarePixels * _gyroRef.betaPercent) / 2;\r\n    if (_canvas.isDrawing) {\r\n      _canvas.drawCtx.beginPath();\r\n      _canvas.drawCtx.arc(xPos, yPos, 5, 0, 2 * Math.PI, true);\r\n      _canvas.drawCtx.fillStyle = _canvas.color;\r\n      _canvas.drawCtx.fill();\r\n    }\r\n\r\n    _canvas.pointerCtx.clearRect(0, 0, _canvas.squarePixels, _canvas.squarePixels);\r\n    _canvas.pointerCtx.beginPath();\r\n    _canvas.pointerCtx.arc(xPos, yPos, 20, 0, 2 * Math.PI, true);\r\n    _canvas.pointerCtx.strokeStyle = '#333';\r\n    _canvas.pointerCtx.stroke();\r\n\r\n    _canvas.pointerCtx.beginPath();\r\n    _canvas.pointerCtx.arc(xPos, yPos, 5, 0, 2 * Math.PI, true);\r\n    _canvas.pointerCtx.fillStyle = '#000';\r\n    _canvas.pointerCtx.fill();\r\n  }\r\n  window.requestAnimationFrame(draw);\r\n};\r\n","export class Gyro implements Disposable {\r\n  private _isCalibrating: boolean = false;\r\n  _hasPermission: boolean = false;\r\n\r\n  /** Is the gyroscope in calibration mode? */\r\n  readonly isCalibrating = () => this._isCalibrating;\r\n  /** Y-Axis, Percentage of current beta angle from calibrated 0 - Max angle. */\r\n  betaPercent: number = 0;\r\n  /** X-Axis, Percentage of current gamma angle from calibrated 0 - Max angle. */\r\n  gammaPercent: number = 0;\r\n\r\n  // Internal Stuff\r\n  private beta: number = 0;\r\n  private betaOffset: number = 0;\r\n  private betaMax: number = 45;\r\n  private gamma: number = 0;\r\n  private gammaOffset: number = 0;\r\n  private gammaMax: number = 45;\r\n\r\n  constructor() {\r\n    this.calibrateCenter();\r\n    window.addEventListener('deviceorientation', () => (this._hasPermission = true), { once: true });\r\n  }\r\n\r\n  [Symbol.dispose](): void {\r\n    window.removeEventListener('deviceorientation', this.listenToOrientation.bind(this), true);\r\n  }\r\n\r\n  listen() {\r\n    window.removeEventListener('deviceorientation', this.listenToOrientation.bind(this), true);\r\n    window.addEventListener('deviceorientation', this.listenToOrientation.bind(this), true);\r\n  }\r\n\r\n  private listenToOrientation(e: DeviceOrientationEvent) {\r\n    if (e.beta && e.gamma) {\r\n      this.beta = e.beta - this.betaOffset;\r\n      if (this.beta > 180) this.beta = -180 - this.beta;\r\n      else if (this.beta < -180) this.beta = -(180 - this.beta);\r\n\r\n      this.gamma = e.gamma - this.gammaOffset;\r\n      if (this.gamma > 90) this.gamma = -90 - this.gamma;\r\n      else if (this.gamma < -90) this.gamma = -(90 - this.gamma);\r\n\r\n      this.betaPercent = 0;\r\n      if (this.beta < 0) this.betaPercent = Math.max(-this.betaMax, this.beta) / this.betaMax;\r\n      else if (this.beta > 0) this.betaPercent = Math.min(this.betaMax, this.beta) / this.betaMax;\r\n\r\n      this.gammaPercent = 0;\r\n      if (this.gamma < 0) this.gammaPercent = Math.max(-this.gammaMax, this.gamma) / this.gammaMax;\r\n      else if (this.gamma > 0) this.gammaPercent = Math.min(this.gammaMax, this.gamma) / this.gammaMax;\r\n    }\r\n  }\r\n\r\n  /**Calibrates the starting angles that correspond to the reticle being at the center of the screen.*/\r\n  calibrateCenter() {\r\n    window.addEventListener(\r\n      'deviceorientation',\r\n      (e: DeviceOrientationEvent) => {\r\n        this.betaOffset = e.beta ?? 0;\r\n        this.gammaOffset = e.gamma ?? 0;\r\n      },\r\n      { once: true }\r\n    );\r\n  }\r\n\r\n  startCalibration() {\r\n    this._isCalibrating = true;\r\n    this.calibrateCenter();\r\n    this.betaMax = 5;\r\n    this.gammaMax = 5;\r\n  }\r\n\r\n  endCalibration() {\r\n    this._isCalibrating = false;\r\n  }\r\n\r\n  /**In calibration mode, this function is called multiple times.\r\n   * As the user tilts the device at comfortable angles, an absolute value of the angles are recorded.\r\n   * Calibrating for small tilts makes it more sensitive.\r\n   * Calibrating big tilts make it more precise\r\n   */\r\n  calibrateMax() {\r\n    this.betaMax = Math.max(this.betaMax, Math.abs(this.beta));\r\n    this.gammaMax = Math.max(this.gammaMax, Math.abs(this.gamma));\r\n  }\r\n}\r\n","export class GyroCanvas {\r\n  readonly squarePixels = 1000;\r\n  isDrawing: boolean = false;\r\n  color: string = 'rgb(0,0,0)';\r\n  drawCtx: CanvasRenderingContext2D;\r\n  pointerCtx: CanvasRenderingContext2D;\r\n  constructor() {\r\n    const drawLayer = document.createElement('canvas');\r\n    const pointerLayer = document.createElement('canvas');\r\n    this.drawCtx = drawLayer.getContext('2d') as CanvasRenderingContext2D;\r\n    this.pointerCtx = pointerLayer.getContext('2d') as CanvasRenderingContext2D;\r\n    // Assign canvas pixel size\r\n    drawLayer.height = drawLayer.width = pointerLayer.height = pointerLayer.width = this.squarePixels;\r\n    drawLayer.className = pointerLayer.className = 'canvas';\r\n    drawLayer.id = 'canvas';\r\n    pointerLayer.id = 'pointerCanvas';\r\n  }\r\n\r\n  registerParent(parent: Element | null) {\r\n    if (parent) {\r\n      const parentElement = parent as HTMLElement;\r\n      const cssSize = Math.min(window.innerHeight, window.innerWidth);\r\n      parentElement.style.setProperty('--canvas-size', cssSize + 'px');\r\n      parent.appendChild(this.drawCtx.canvas);\r\n      parent.appendChild(this.pointerCtx.canvas);\r\n    }\r\n  }\r\n}\r\n"],"names":["$de721603b3081a12$export$2f471b5aa48f9e76","constructor","_isCalibrating","_hasPermission","isCalibrating","betaPercent","gammaPercent","beta","betaOffset","betaMax","gamma","gammaOffset","gammaMax","calibrateCenter","window","addEventListener","once","Symbol","dispose","removeEventListener","listenToOrientation","bind","listen","e","Math","max","min","startCalibration","endCalibration","calibrateMax","abs","$1e6a16da88d577c6$var$_gyroRef","$1e6a16da88d577c6$var$_canvas","squarePixels","isDrawing","color","drawLayer","document","createElement","pointerLayer","drawCtx","getContext","pointerCtx","height","width","className","id","registerParent","parent","cssSize","innerHeight","innerWidth","parentElement","style","setProperty","appendChild","canvas","onload","querySelector","_drawButton","_requestButton","$1e6a16da88d577c6$var$getHSL","touches","clientX","setTimeout","display","DeviceOrientationEvent","requestPermission","then","status","requestAnimationFrame","$1e6a16da88d577c6$var$draw","centerX","centerY","xPos","yPos","beginPath","arc","PI","fillStyle","fill","clearRect","strokeStyle","stroke"],"version":3,"file":"index.759de219.js.map"}