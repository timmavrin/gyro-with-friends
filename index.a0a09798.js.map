{"mappings":"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","sources":["<anon>","src/index.ts","src/pages/title/title.ts","src/helpers.ts","src/pages/draw/draw.ts","src/gyro.ts","src/gyroCanvas.ts"],"sourcesContent":["const $cbaf4ae7fed0aa8a$export$185802fd694ee1f5 = (tag, options)=>{\n    const element = document.createElement(tag);\n    Object.assign(element, options);\n    return element;\n};\n\n\nclass $de721603b3081a12$export$2f471b5aa48f9e76 {\n    constructor(){\n        this._isCalibrating = false;\n        this._hasPermission = false;\n        /** Is the gyroscope in calibration mode? */ this.isCalibrating = ()=>this._isCalibrating;\n        /** Y-Axis, Percentage of current beta angle from calibrated 0 - Max angle. */ this.betaPercent = 0;\n        /** X-Axis, Percentage of current gamma angle from calibrated 0 - Max angle. */ this.gammaPercent = 0;\n        // Internal Stuff\n        this.beta = 0;\n        this.betaOffset = 0;\n        this.betaMax = 45;\n        this.gamma = 0;\n        this.gammaOffset = 0;\n        this.gammaMax = 45;\n        this.calibrateCenter();\n        window.addEventListener(\"deviceorientation\", ()=>this._hasPermission = true, {\n            once: true\n        });\n    }\n    [Symbol.dispose]() {\n        window.removeEventListener(\"deviceorientation\", this.listenToOrientation.bind(this), true);\n    }\n    listen() {\n        window.removeEventListener(\"deviceorientation\", this.listenToOrientation.bind(this), true);\n        window.addEventListener(\"deviceorientation\", this.listenToOrientation.bind(this), true);\n    }\n    listenToOrientation(e) {\n        if (e.beta && e.gamma) {\n            this.beta = e.beta - this.betaOffset;\n            if (this.beta > 180) this.beta = -180 - this.beta;\n            else if (this.beta < -180) this.beta = -(180 - this.beta);\n            this.gamma = e.gamma - this.gammaOffset;\n            if (this.gamma > 90) this.gamma = -90 - this.gamma;\n            else if (this.gamma < -90) this.gamma = -(90 - this.gamma);\n            this.betaPercent = 0;\n            if (this.beta < 0) this.betaPercent = Math.max(-this.betaMax, this.beta) / this.betaMax;\n            else if (this.beta > 0) this.betaPercent = Math.min(this.betaMax, this.beta) / this.betaMax;\n            this.gammaPercent = 0;\n            if (this.gamma < 0) this.gammaPercent = Math.max(-this.gammaMax, this.gamma) / this.gammaMax;\n            else if (this.gamma > 0) this.gammaPercent = Math.min(this.gammaMax, this.gamma) / this.gammaMax;\n        }\n    }\n    /**Calibrates the starting angles that correspond to the reticle being at the center of the screen.*/ calibrateCenter() {\n        window.addEventListener(\"deviceorientation\", (e)=>{\n            this.betaOffset = e.beta ?? 0;\n            this.gammaOffset = e.gamma ?? 0;\n        }, {\n            once: true\n        });\n    }\n    startCalibration() {\n        this._isCalibrating = true;\n        this.calibrateCenter();\n        this.betaMax = 5;\n        this.gammaMax = 5;\n    }\n    endCalibration() {\n        this._isCalibrating = false;\n    }\n    /**In calibration mode, this function is called multiple times.\r\n   * As the user tilts the device at comfortable angles, an absolute value of the angles are recorded.\r\n   * Calibrating for small tilts makes it more sensitive.\r\n   * Calibrating big tilts make it more precise\r\n   */ calibrateMax() {\n        this.betaMax = Math.max(this.betaMax, Math.abs(this.beta));\n        this.gammaMax = Math.max(this.gammaMax, Math.abs(this.gamma));\n    }\n}\n\n\n\nclass $1a69b22be1d9263e$export$2367fe50a6a20d49 {\n    constructor(){\n        this.squarePixels = 1000;\n        this.isDrawing = false;\n        this.color = \"rgb(0,0,0)\";\n        const drawLayer = (0, $cbaf4ae7fed0aa8a$export$185802fd694ee1f5)(\"canvas\", {\n            id: \"canvas\",\n            className: \"canvas\",\n            width: this.squarePixels,\n            height: this.squarePixels\n        });\n        const pointerLayer = (0, $cbaf4ae7fed0aa8a$export$185802fd694ee1f5)(\"canvas\", {\n            id: \"pointer-canvas\",\n            className: \"canvas\",\n            width: this.squarePixels,\n            height: this.squarePixels\n        });\n        this.drawCtx = drawLayer.getContext(\"2d\");\n        this.pointerCtx = pointerLayer.getContext(\"2d\");\n    }\n    registerParent(parent) {\n        if (parent) {\n            const cssSize = Math.min(window.innerHeight, window.innerWidth);\n            document.body.style.setProperty(\"--canvas-size\", cssSize + \"px\");\n            parent.appendChild(this.drawCtx.canvas);\n            parent.appendChild(this.pointerCtx.canvas);\n        }\n    }\n}\n\n\n\nlet $6c0324a95383805d$var$_gyroRef;\nlet $6c0324a95383805d$var$_canvas;\nconst $6c0324a95383805d$export$ec1dea53b691fbad = ()=>{\n    document.querySelector(\"#draw-page\")?.remove();\n    document.body.replaceChildren();\n};\nconst $6c0324a95383805d$export$99ca90c661d95cb9 = ()=>{\n    $6c0324a95383805d$var$_gyroRef = new (0, $de721603b3081a12$export$2f471b5aa48f9e76)();\n    $6c0324a95383805d$var$_canvas = new (0, $1a69b22be1d9263e$export$2367fe50a6a20d49)();\n    const page = (0, $cbaf4ae7fed0aa8a$export$185802fd694ee1f5)(\"div\", {\n        id: \"draw-page\"\n    });\n    const canvasContainer = (0, $cbaf4ae7fed0aa8a$export$185802fd694ee1f5)(\"div\", {\n        id: \"canvas-container\"\n    });\n    $6c0324a95383805d$var$_canvas.registerParent(canvasContainer);\n    const colorCanvas = (0, $cbaf4ae7fed0aa8a$export$185802fd694ee1f5)(\"canvas\", {\n        id: \"color-canvas\"\n    });\n    const calibrateButton = (0, $cbaf4ae7fed0aa8a$export$185802fd694ee1f5)(\"button\", {\n        id: \"calibrate-button\",\n        innerText: \"Calibrate\"\n    });\n    page.append(canvasContainer, colorCanvas, calibrateButton);\n    document.body.appendChild(page);\n    let colorContext = colorCanvas.getContext(\"2d\");\n    const gradient = colorContext?.createLinearGradient(0, 200, 400, 200);\n    gradient?.addColorStop(0, \"red\");\n    gradient?.addColorStop(0.125, \"orange\");\n    gradient?.addColorStop(0.25, \"yellow\");\n    gradient?.addColorStop(0.375, \"green\");\n    gradient?.addColorStop(0.5, \"blue\");\n    gradient?.addColorStop(0.625, \"purple\");\n    gradient?.addColorStop(0.75, \"black\");\n    gradient?.addColorStop(1, \"black\");\n    colorContext.fillStyle = gradient;\n    colorContext.fillRect(0, 0, 400, 400);\n    colorCanvas.ontouchstart = (e)=>{\n        let xPos = e.touches[0].clientX;\n        if ($6c0324a95383805d$var$_canvas) {\n            $6c0324a95383805d$var$_canvas.isDrawing = true;\n            let id = colorContext.getImageData(xPos * 300 / $6c0324a95383805d$var$_canvas.squarePixels, 0, 1, 1).data;\n            $6c0324a95383805d$var$_canvas.color = `rgb(${id[0]},${id[1]},${id[2]})`;\n        }\n    };\n    colorCanvas.ontouchmove = (e)=>{\n        let xPos = e.touches[0].clientX;\n        if ($6c0324a95383805d$var$_canvas) {\n            // Keep setting the color\n            let id = colorContext.getImageData(xPos * 300 / $6c0324a95383805d$var$_canvas.squarePixels, 0, 1, 1).data;\n            $6c0324a95383805d$var$_canvas.color = `rgb(${id[0]},${id[1]},${id[2]})`;\n        }\n    };\n    colorCanvas.ontouchend = ()=>{\n        if ($6c0324a95383805d$var$_canvas) $6c0324a95383805d$var$_canvas.isDrawing = false;\n    };\n    $6c0324a95383805d$var$_gyroRef.listen();\n    calibrateButton.addEventListener(\"touchstart\", (e)=>{\n        if ($6c0324a95383805d$var$_gyroRef) $6c0324a95383805d$var$_gyroRef.startCalibration();\n    });\n    calibrateButton.addEventListener(\"touchend\", (e)=>{\n        if ($6c0324a95383805d$var$_gyroRef) $6c0324a95383805d$var$_gyroRef.endCalibration();\n    });\n    window.requestAnimationFrame($6c0324a95383805d$var$draw);\n};\nconst $6c0324a95383805d$var$getHSL = (clientX)=>{\n    return `hsl(${360 * clientX / window.innerWidth} 100 50)`;\n};\nconst $6c0324a95383805d$var$draw = ()=>{\n    if ($6c0324a95383805d$var$_gyroRef?.isCalibrating()) $6c0324a95383805d$var$_gyroRef.calibrateMax();\n    else if ($6c0324a95383805d$var$_canvas && $6c0324a95383805d$var$_gyroRef) {\n        let centerX = $6c0324a95383805d$var$_canvas.squarePixels / 2;\n        let centerY = $6c0324a95383805d$var$_canvas.squarePixels / 2;\n        let xPos = centerX + $6c0324a95383805d$var$_canvas.squarePixels * $6c0324a95383805d$var$_gyroRef.gammaPercent / 2;\n        let yPos = centerY + $6c0324a95383805d$var$_canvas.squarePixels * $6c0324a95383805d$var$_gyroRef.betaPercent / 2;\n        if ($6c0324a95383805d$var$_canvas.isDrawing) {\n            $6c0324a95383805d$var$_canvas.drawCtx.beginPath();\n            $6c0324a95383805d$var$_canvas.drawCtx.arc(xPos, yPos, 5, 0, 2 * Math.PI, true);\n            $6c0324a95383805d$var$_canvas.drawCtx.fillStyle = $6c0324a95383805d$var$_canvas.color;\n            $6c0324a95383805d$var$_canvas.drawCtx.fill();\n        }\n        $6c0324a95383805d$var$_canvas.pointerCtx.clearRect(0, 0, $6c0324a95383805d$var$_canvas.squarePixels, $6c0324a95383805d$var$_canvas.squarePixels);\n        $6c0324a95383805d$var$_canvas.pointerCtx.beginPath();\n        $6c0324a95383805d$var$_canvas.pointerCtx.arc(xPos, yPos, 20, 0, 2 * Math.PI, true);\n        $6c0324a95383805d$var$_canvas.pointerCtx.strokeStyle = \"#333\";\n        $6c0324a95383805d$var$_canvas.pointerCtx.stroke();\n        $6c0324a95383805d$var$_canvas.pointerCtx.beginPath();\n        $6c0324a95383805d$var$_canvas.pointerCtx.arc(xPos, yPos, 5, 0, 2 * Math.PI, true);\n        $6c0324a95383805d$var$_canvas.pointerCtx.fillStyle = \"#000\";\n        $6c0324a95383805d$var$_canvas.pointerCtx.fill();\n    }\n    window.requestAnimationFrame($6c0324a95383805d$var$draw);\n};\n\n\nconst $7251193c454348ce$var$DOEvent = DeviceOrientationEvent;\nconst $7251193c454348ce$export$3c8609f2a57439b3 = ()=>{\n    document.querySelector(\"#title-page\")?.remove();\n    document.body.replaceChildren();\n};\nconst $7251193c454348ce$export$553f274869ee0a8f = ()=>{\n    const page = (0, $cbaf4ae7fed0aa8a$export$185802fd694ee1f5)(\"div\", {\n        id: \"title-page\"\n    });\n    const title = (0, $cbaf4ae7fed0aa8a$export$185802fd694ee1f5)(\"h1\", {\n        innerText: \"Gyro\",\n        className: \"title-header\"\n    });\n    const playButton = (0, $cbaf4ae7fed0aa8a$export$185802fd694ee1f5)(\"button\", {\n        innerText: \"Play\",\n        className: \"big-button\",\n        onclick: $7251193c454348ce$var$onClickPlay\n    });\n    page.append(title, playButton);\n    document.body.appendChild(page);\n};\nconst $7251193c454348ce$var$onClickPlay = async ()=>{\n    if (\"requestPermission\" in $7251193c454348ce$var$DOEvent && typeof $7251193c454348ce$var$DOEvent[\"requestPermission\"] === \"function\") {\n        const status = await $7251193c454348ce$var$DOEvent.requestPermission();\n        // Stay on the page until permission is granted\n        if (status !== \"granted\") return;\n    }\n    $7251193c454348ce$export$3c8609f2a57439b3();\n    (0, $6c0324a95383805d$export$99ca90c661d95cb9)();\n};\n\n\nwindow.onload = ()=>{\n    (0, $7251193c454348ce$export$553f274869ee0a8f)();\n};\n\n\n//# sourceMappingURL=index.a0a09798.js.map\n","import { renderTitle } from './pages/title/title';\r\n\r\nwindow.onload = () => {\r\n  renderTitle();\r\n};\r\n","import { create } from '../../helpers';\r\nimport { renderDraw } from '../draw/draw';\r\n\r\nconst DOEvent = DeviceOrientationEvent;\r\n\r\nexport const removeTitle = () => {\r\n  document.querySelector('#title-page')?.remove();\r\n  document.body.replaceChildren();\r\n};\r\n\r\nexport const renderTitle = () => {\r\n  const page = create('div', { id: 'title-page' });\r\n  const title = create('h1', { innerText: 'Gyro', className: 'title-header' });\r\n  const playButton = create('button', { innerText: 'Play', className: 'big-button', onclick: onClickPlay });\r\n  page.append(title, playButton);\r\n  document.body.appendChild(page);\r\n};\r\n\r\nconst onClickPlay = async () => {\r\n  if ('requestPermission' in DOEvent && typeof DOEvent['requestPermission'] === 'function') {\r\n    const status: string = await DOEvent.requestPermission();\r\n    // Stay on the page until permission is granted\r\n    if (status !== 'granted') {\r\n      return;\r\n    }\r\n  }\r\n  removeTitle();\r\n  renderDraw();\r\n};\r\n","export const create = <K extends keyof HTMLElementTagNameMap>(tag: K, options?: Partial<HTMLElementTagNameMap[K]>) => {\r\n  const element = document.createElement(tag);\r\n  Object.assign(element, options);\r\n  return element;\r\n};\r\n","import { Gyro } from '../../gyro';\r\nimport { GyroCanvas } from '../../gyroCanvas';\r\nimport { create } from '../../helpers';\r\n\r\nlet _gyroRef: Gyro | undefined;\r\nlet _canvas: GyroCanvas | undefined;\r\n\r\nexport const removeDraw = () => {\r\n  document.querySelector('#draw-page')?.remove();\r\n  document.body.replaceChildren();\r\n};\r\n\r\nexport const renderDraw = () => {\r\n  _gyroRef = new Gyro();\r\n  _canvas = new GyroCanvas();\r\n  const page = create('div', { id: 'draw-page' });\r\n  const canvasContainer = create('div', { id: 'canvas-container' });\r\n  _canvas.registerParent(canvasContainer);\r\n  const colorCanvas = create('canvas', { id: 'color-canvas' });\r\n  const calibrateButton = create('button', { id: 'calibrate-button', innerText: 'Calibrate' });\r\n\r\n  page.append(canvasContainer, colorCanvas, calibrateButton);\r\n  document.body.appendChild(page);\r\n\r\n  let colorContext = colorCanvas.getContext('2d')!;\r\n  const gradient = colorContext?.createLinearGradient(0, 200, 400, 200);\r\n  gradient?.addColorStop(0, 'red');\r\n  gradient?.addColorStop(0.125, 'orange');\r\n  gradient?.addColorStop(0.25, 'yellow');\r\n  gradient?.addColorStop(0.375, 'green');\r\n  gradient?.addColorStop(0.5, 'blue');\r\n  gradient?.addColorStop(0.625, 'purple');\r\n  gradient?.addColorStop(0.75, 'black');\r\n  gradient?.addColorStop(1, 'black');\r\n\r\n  colorContext.fillStyle = gradient;\r\n  colorContext.fillRect(0, 0, 400, 400);\r\n\r\n  colorCanvas.ontouchstart = (e) => {\r\n    let xPos = e.touches[0].clientX;\r\n    if (_canvas) {\r\n      _canvas.isDrawing = true;\r\n      let id = colorContext.getImageData((xPos * 300) / _canvas.squarePixels, 0, 1, 1).data;\r\n      _canvas.color = `rgb(${id[0]},${id[1]},${id[2]})`;\r\n    }\r\n  };\r\n\r\n  colorCanvas.ontouchmove = (e) => {\r\n    let xPos = e.touches[0].clientX;\r\n    if (_canvas) {\r\n      // Keep setting the color\r\n      let id = colorContext.getImageData((xPos * 300) / _canvas.squarePixels, 0, 1, 1).data;\r\n      _canvas.color = `rgb(${id[0]},${id[1]},${id[2]})`;\r\n    }\r\n  };\r\n\r\n  colorCanvas.ontouchend = () => {\r\n    if (_canvas) {\r\n      _canvas.isDrawing = false;\r\n    }\r\n  };\r\n\r\n  _gyroRef.listen();\r\n  calibrateButton.addEventListener('touchstart', (e) => {\r\n    if (_gyroRef) {\r\n      _gyroRef.startCalibration();\r\n    }\r\n  });\r\n  calibrateButton.addEventListener('touchend', (e) => {\r\n    if (_gyroRef) {\r\n      _gyroRef.endCalibration();\r\n    }\r\n  });\r\n\r\n  window.requestAnimationFrame(draw);\r\n};\r\n\r\nconst getHSL = (clientX: number) => {\r\n  return `hsl(${(360 * clientX) / window.innerWidth} 100 50)`;\r\n};\r\n\r\nconst draw = () => {\r\n  if (_gyroRef?.isCalibrating()) {\r\n    _gyroRef.calibrateMax();\r\n  } else if (_canvas && _gyroRef) {\r\n    let centerX = _canvas.squarePixels / 2;\r\n    let centerY = _canvas.squarePixels / 2;\r\n\r\n    let xPos = centerX + (_canvas.squarePixels * _gyroRef.gammaPercent) / 2;\r\n    let yPos = centerY + (_canvas.squarePixels * _gyroRef.betaPercent) / 2;\r\n    if (_canvas.isDrawing) {\r\n      _canvas.drawCtx.beginPath();\r\n      _canvas.drawCtx.arc(xPos, yPos, 5, 0, 2 * Math.PI, true);\r\n      _canvas.drawCtx.fillStyle = _canvas.color;\r\n      _canvas.drawCtx.fill();\r\n    }\r\n\r\n    _canvas.pointerCtx.clearRect(0, 0, _canvas.squarePixels, _canvas.squarePixels);\r\n    _canvas.pointerCtx.beginPath();\r\n    _canvas.pointerCtx.arc(xPos, yPos, 20, 0, 2 * Math.PI, true);\r\n    _canvas.pointerCtx.strokeStyle = '#333';\r\n    _canvas.pointerCtx.stroke();\r\n\r\n    _canvas.pointerCtx.beginPath();\r\n    _canvas.pointerCtx.arc(xPos, yPos, 5, 0, 2 * Math.PI, true);\r\n    _canvas.pointerCtx.fillStyle = '#000';\r\n    _canvas.pointerCtx.fill();\r\n  }\r\n  window.requestAnimationFrame(draw);\r\n};\r\n","export class Gyro implements Disposable {\r\n  private _isCalibrating: boolean = false;\r\n  _hasPermission: boolean = false;\r\n\r\n  /** Is the gyroscope in calibration mode? */\r\n  readonly isCalibrating = () => this._isCalibrating;\r\n  /** Y-Axis, Percentage of current beta angle from calibrated 0 - Max angle. */\r\n  betaPercent: number = 0;\r\n  /** X-Axis, Percentage of current gamma angle from calibrated 0 - Max angle. */\r\n  gammaPercent: number = 0;\r\n\r\n  // Internal Stuff\r\n  private beta: number = 0;\r\n  private betaOffset: number = 0;\r\n  private betaMax: number = 45;\r\n  private gamma: number = 0;\r\n  private gammaOffset: number = 0;\r\n  private gammaMax: number = 45;\r\n\r\n  constructor() {\r\n    this.calibrateCenter();\r\n    window.addEventListener('deviceorientation', () => (this._hasPermission = true), { once: true });\r\n  }\r\n\r\n  [Symbol.dispose](): void {\r\n    window.removeEventListener('deviceorientation', this.listenToOrientation.bind(this), true);\r\n  }\r\n\r\n  listen() {\r\n    window.removeEventListener('deviceorientation', this.listenToOrientation.bind(this), true);\r\n    window.addEventListener('deviceorientation', this.listenToOrientation.bind(this), true);\r\n  }\r\n\r\n  private listenToOrientation(e: DeviceOrientationEvent) {\r\n    if (e.beta && e.gamma) {\r\n      this.beta = e.beta - this.betaOffset;\r\n      if (this.beta > 180) this.beta = -180 - this.beta;\r\n      else if (this.beta < -180) this.beta = -(180 - this.beta);\r\n\r\n      this.gamma = e.gamma - this.gammaOffset;\r\n      if (this.gamma > 90) this.gamma = -90 - this.gamma;\r\n      else if (this.gamma < -90) this.gamma = -(90 - this.gamma);\r\n\r\n      this.betaPercent = 0;\r\n      if (this.beta < 0) this.betaPercent = Math.max(-this.betaMax, this.beta) / this.betaMax;\r\n      else if (this.beta > 0) this.betaPercent = Math.min(this.betaMax, this.beta) / this.betaMax;\r\n\r\n      this.gammaPercent = 0;\r\n      if (this.gamma < 0) this.gammaPercent = Math.max(-this.gammaMax, this.gamma) / this.gammaMax;\r\n      else if (this.gamma > 0) this.gammaPercent = Math.min(this.gammaMax, this.gamma) / this.gammaMax;\r\n    }\r\n  }\r\n\r\n  /**Calibrates the starting angles that correspond to the reticle being at the center of the screen.*/\r\n  calibrateCenter() {\r\n    window.addEventListener(\r\n      'deviceorientation',\r\n      (e: DeviceOrientationEvent) => {\r\n        this.betaOffset = e.beta ?? 0;\r\n        this.gammaOffset = e.gamma ?? 0;\r\n      },\r\n      { once: true }\r\n    );\r\n  }\r\n\r\n  startCalibration() {\r\n    this._isCalibrating = true;\r\n    this.calibrateCenter();\r\n    this.betaMax = 5;\r\n    this.gammaMax = 5;\r\n  }\r\n\r\n  endCalibration() {\r\n    this._isCalibrating = false;\r\n  }\r\n\r\n  /**In calibration mode, this function is called multiple times.\r\n   * As the user tilts the device at comfortable angles, an absolute value of the angles are recorded.\r\n   * Calibrating for small tilts makes it more sensitive.\r\n   * Calibrating big tilts make it more precise\r\n   */\r\n  calibrateMax() {\r\n    this.betaMax = Math.max(this.betaMax, Math.abs(this.beta));\r\n    this.gammaMax = Math.max(this.gammaMax, Math.abs(this.gamma));\r\n  }\r\n}\r\n","import { create } from './helpers';\r\n\r\nexport class GyroCanvas {\r\n  readonly squarePixels = 1000;\r\n  isDrawing: boolean = false;\r\n  color: string = 'rgb(0,0,0)';\r\n  drawCtx: CanvasRenderingContext2D;\r\n  pointerCtx: CanvasRenderingContext2D;\r\n  constructor() {\r\n    const drawLayer = create('canvas', {\r\n      id: 'canvas',\r\n      className: 'canvas',\r\n      width: this.squarePixels,\r\n      height: this.squarePixels,\r\n    });\r\n    const pointerLayer = create('canvas', {\r\n      id: 'pointer-canvas',\r\n      className: 'canvas',\r\n      width: this.squarePixels,\r\n      height: this.squarePixels,\r\n    });\r\n    this.drawCtx = drawLayer.getContext('2d') as CanvasRenderingContext2D;\r\n    this.pointerCtx = pointerLayer.getContext('2d') as CanvasRenderingContext2D;\r\n  }\r\n\r\n  registerParent(parent: Element | null) {\r\n    if (parent) {\r\n      const cssSize = Math.min(window.innerHeight, window.innerWidth);\r\n      document.body.style.setProperty('--canvas-size', cssSize + 'px');\r\n\r\n      parent.appendChild(this.drawCtx.canvas);\r\n      parent.appendChild(this.pointerCtx.canvas);\r\n    }\r\n  }\r\n}\r\n"],"names":["$6c0324a95383805d$var$_gyroRef","$6c0324a95383805d$var$_canvas","$cbaf4ae7fed0aa8a$export$185802fd694ee1f5","tag","options","element","document","createElement","Object","assign","$de721603b3081a12$export$2f471b5aa48f9e76","constructor","_isCalibrating","_hasPermission","isCalibrating","betaPercent","gammaPercent","beta","betaOffset","betaMax","gamma","gammaOffset","gammaMax","calibrateCenter","window","addEventListener","once","Symbol","dispose","removeEventListener","listenToOrientation","bind","listen","e","Math","max","min","startCalibration","endCalibration","calibrateMax","abs","$1a69b22be1d9263e$export$2367fe50a6a20d49","squarePixels","isDrawing","color","drawLayer","id","className","width","height","pointerLayer","drawCtx","getContext","pointerCtx","registerParent","parent","cssSize","innerHeight","innerWidth","body","style","setProperty","appendChild","canvas","$6c0324a95383805d$export$99ca90c661d95cb9","page","canvasContainer","colorCanvas","calibrateButton","innerText","append","colorContext","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","ontouchstart","xPos","touches","clientX","getImageData","data","ontouchmove","ontouchend","requestAnimationFrame","$6c0324a95383805d$var$draw","centerX","centerY","yPos","beginPath","arc","PI","fill","clearRect","strokeStyle","stroke","$7251193c454348ce$var$DOEvent","DeviceOrientationEvent","$7251193c454348ce$export$3c8609f2a57439b3","querySelector","remove","replaceChildren","$7251193c454348ce$export$553f274869ee0a8f","title","playButton","onclick","$7251193c454348ce$var$onClickPlay","status","requestPermission","onload"],"version":3,"file":"index.a0a09798.js.map"}